@page "/"

<div>---CascadingThemeState----</div>

<CascadingThemeState>
    <MyComponent />
</CascadingThemeState>



@*
    /*
    The all the auth related components are part of Blazors core lib, e.g. CascadingAuthenticationState.
        It looks like the rest are here: https://github.com/dotnet/aspnetcore/tree/master/src/Components/Authorization/src

    If you want the core idea to code against, lets simplify it a bit. Suppose we want to pass a ThemeState class down from the root of our render tree in our Blazor app, so all themeable components can ask for the current theme settings:

    class ThemeState
    {
    public bool IsDarkMode {get;}
    }

    The provider of ThemeState is:

    // CascadingThemeState.razor
    <CascadingValue Value="new ThemeState()">
        @ChildContent
    </CascadingValue>
    @code {
        [Parameter] public RenderFragment ChildContent { get; set; }
    }

    The receiver of ThemeState is:

    // ThemableButton.razor
    <button class=@(Theme.IsDarkMode ? "dark-btn" : "light-btn")>CLICK ME</button>
    @code {
        [CascadingParameter] public ThemeState Theme {get; set;}
    }

    The component under test is:

    // MyComponent.razor
    <h1>Here is a button you can click...</h1>
    <ThemableButton/>

    And in production code it would be used like this:

    <CascadingThemeState>
        <MyComponent />
    </CascadingThemeState>

        The neat thing about cascading values is that they cascading through the component tree, even if a component,
        in this case MyComponent, does not have a parameter that captures it.
    */
*@